# 1 "iit_lexer.mll"
 

  open Iit_parser
  exception Quit
  exception NeedMore
  exception SyntaxError

(* Taken from https://v2.ocaml.org/releases/4.14/htmlman/lexyacc.html#s%3Alexyacc-common-errors
and https://stackoverflow.com/questions/35068495/ocamllex-case-insenstitive*)
let keywords = Hashtbl.create 10
let _ = List.iter (fun (kwd, tok) -> Hashtbl.add keywords kwd tok)
    [ "integer", TINT;
      "character", TCHARACTER;
      "logical", TLOGICAL;
      "and", AND;
      "or", OR;
      "not", NOT;
      "char", CCHAR;
      "int", CINT;
      "lg", CLG;
      "if", IF;
      "else", ELSE;
      "do", DO;
      "end", END;
      "while", WHILE;
      "stop", STOP
      ]

# 31 "iit_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\254\255\255\255\002\000\234\255\235\255\236\255\237\255\
    \238\255\000\000\243\255\244\255\245\255\247\255\248\255\080\000\
    \081\000\001\000\156\000\166\000\253\255\254\255\255\255\000\000\
    \251\255\242\255\249\255\240\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\016\000\255\255\255\255\255\255\255\255\255\255\014\000\
    \005\000\255\255\003\000\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\023\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\002\000\022\000\021\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\022\000\000\000\000\000\008\000\020\000\024\000\
    \255\255\017\000\006\000\005\000\011\000\013\000\014\000\019\000\
    \000\000\010\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\000\000\027\000\015\000\007\000\
    \009\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\026\000\000\000\000\000\
    \012\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\000\000\025\000\000\000\000\000\
    \000\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\000\000\000\000\000\000\000\000\
    \016\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\003\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\255\255\255\255\003\000\003\000\023\000\
    \017\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \255\255\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\255\255\009\000\003\000\003\000\
    \003\000\255\255\255\255\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\015\000\255\255\255\255\
    \003\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\255\255\255\255\015\000\255\255\255\255\
    \255\255\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\255\255\255\255\255\255\255\255\
    \016\000\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\017\000\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 0
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 36 "iit_lexer.mll"
              ( Lexing.new_line lexbuf; token lexbuf )
# 177 "iit_lexer.ml"

  | 1 ->
# 37 "iit_lexer.mll"
           ( comment lexbuf)
# 182 "iit_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and token lexbuf =
   __ocaml_lex_token_rec lexbuf 3
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 39 "iit_lexer.mll"
            ( token lexbuf )
# 194 "iit_lexer.ml"

  | 1 ->
# 40 "iit_lexer.mll"
              ( Lexing.new_line lexbuf; token lexbuf )
# 199 "iit_lexer.ml"

  | 2 ->
# 41 "iit_lexer.mll"
             ( comment lexbuf )
# 204 "iit_lexer.ml"

  | 3 ->
let
# 42 "iit_lexer.mll"
                        n
# 210 "iit_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 42 "iit_lexer.mll"
                          ( INT (int_of_string n) )
# 214 "iit_lexer.ml"

  | 4 ->
let
# 43 "iit_lexer.mll"
                             c
# 220 "iit_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 43 "iit_lexer.mll"
                                     ( CHAR c )
# 224 "iit_lexer.ml"

  | 5 ->
let
# 45 "iit_lexer.mll"
                  s
# 230 "iit_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "iit_lexer.mll"
                    ( try Hashtbl.find keywords (String.lowercase_ascii s)
                      with Not_found -> IDENT (String.lowercase_ascii s) )
# 235 "iit_lexer.ml"

  | 6 ->
# 47 "iit_lexer.mll"
              ( ASSIGN)
# 240 "iit_lexer.ml"

  | 7 ->
# 48 "iit_lexer.mll"
             ( COMMA )
# 245 "iit_lexer.ml"

  | 8 ->
# 49 "iit_lexer.mll"
             ( PLUS )
# 250 "iit_lexer.ml"

  | 9 ->
# 50 "iit_lexer.mll"
             ( MINUS )
# 255 "iit_lexer.ml"

  | 10 ->
# 51 "iit_lexer.mll"
             ( NEG )
# 260 "iit_lexer.ml"

  | 11 ->
# 52 "iit_lexer.mll"
             ( TIMES )
# 265 "iit_lexer.ml"

  | 12 ->
# 53 "iit_lexer.mll"
             ( DIV )
# 270 "iit_lexer.ml"

  | 13 ->
# 54 "iit_lexer.mll"
              ( LE )
# 275 "iit_lexer.ml"

  | 14 ->
# 55 "iit_lexer.mll"
             ( LT )
# 280 "iit_lexer.ml"

  | 15 ->
# 56 "iit_lexer.mll"
              ( GE )
# 285 "iit_lexer.ml"

  | 16 ->
# 57 "iit_lexer.mll"
             ( GT )
# 290 "iit_lexer.ml"

  | 17 ->
# 58 "iit_lexer.mll"
             ( NE )
# 295 "iit_lexer.ml"

  | 18 ->
# 60 "iit_lexer.mll"
             ( EQUAL )
# 300 "iit_lexer.ml"

  | 19 ->
# 62 "iit_lexer.mll"
             ( LPAREN )
# 305 "iit_lexer.ml"

  | 20 ->
# 63 "iit_lexer.mll"
             ( RPAREN )
# 310 "iit_lexer.ml"

  | 21 ->
# 64 "iit_lexer.mll"
             ( EOF )
# 315 "iit_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

